services:
    oc_platform.antispam:
        class: OC\PlatformBundle\Antispam\OCAntispam
        arguments:
            - 50
        calls: 
            - [ setLocale, [%locale%]]

    oc_platform.envoiEmail: 
        class: OC\PlatformBundle\EnvoiEmail\OCEnvoiEmail
        arguments: 
            - "@mailer"

    oc_platform.creationPersistance: 
        class: OC\PlatformBundle\DoctrineListener\CreationListener
        arguments: 
            - "@oc_platform.envoiEmail" 
        tags: 
            - { name: doctrine.event_listener, event: postPersist } 
        #event: correspond à l'évenement que le listener veut ecouter      



    oc_platform.advert.purge: 
        class: OC\PlatformBundle\SystemePurge\Purge
        arguments: 
            - '@doctrine.orm.entity_manager'


    oc_platform.twig.antispam_extension: 
        class: OC\PlatformBundle\Twig\AntispamExtension
        arguments: 
            - "@oc_platform.antispam"
        tags: 
            - { name: twig.extension }


    oc_platform.beta.html_adder:
        class: OC\PlatformBundle\Beta\BetaHTMLAdder


    oc_platform.beta.listener: 
        class: OC\PlatformBundle\Beta\BetaListener
        arguments: 
            - "@oc_platform.beta.html_adder"
            - "2017-10-30" #endDate
        tags: 
            - { name: kernel.event_listener, event: kernel.response, method: processBeta }
#event: correspond à l'évenement que le listener veut ecouter. ici kernel.reponse
#method: c'est le nom de la méthode du listener à exécuter lorsque l'évènement est déclenché.


    oc_platform.bigbrother.message_listener: 
        class: OC\PlatformBundle\BigBrother\MessageListener
        arguments: 
            - "@oc_platform.envoiEmail"
            - ["balde", "amara", "marie"]
        tags:
            - { name: kernel.event_listener , event: oc_platform.post_message, method: processMessage }

#    oc_platform.example:
#        class: OC\PlatformBundle\Example
#        arguments: ["@service_id", "plain_value", "%parameter%"]
    
